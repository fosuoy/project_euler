#!/usr/bin/env python3
import time
import math

def blurb():
    print("""
Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?
    """)

def is_pentagonal(x):
    pentagonal_test = (math.sqrt((24 * x) + 1) + 1) / 6
    if pentagonal_test % 1 == 0: return True
    return False

def get_biggest_d_for_pent_numbers():
    upper_bound = 10000
    pentagon = lambda x: int((x*((3*x) - 1))/2)
    pentagon_numbers = [pentagon(x) for x in range(1, upper_bound)]
    for number_1 in pentagon_numbers[::-1]:
        for number_2 in pentagon_numbers:
            product = number_1 + number_2
            if is_pentagonal(product):
                d = abs(number_2 - number_1)
                if is_pentagonal(d):
                    print("%d + %d = %d" % (number_1, number_2, product))
                    return d

def main():
    blurb()
    start = time.time()
    RESULT = get_biggest_d_for_pent_numbers()
    end   = time.time() - start
    print("Result: %s"      % RESULT)
    print("Completed in %s" % end)

if __name__ == '__main__':
    main()
