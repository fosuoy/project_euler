(ns project-euler.problem-02
  (:require [project-euler.common :as common])
  (:gen-class))

(defn find-solution
  [solution]
  (let [result (time (eval solution))]
    (clojure.pprint/pprint (str ("Result: " result)))))

(defn problem-02-solve
  "
  problem 02... takes no arguments
  sum of fibonacci sequence below 4000000
  "
  []
  (let [blurb-text (str "Each new term in the Fibonacci sequence is generated by"
                        "adding the previous two terms.\n"
                        "By starting with 1 and 2, the first 10 terms will be:\n"
                        "1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ..."
                        "By considering the terms in the Fibonacci sequence whose"
                        " values do not exceed four million, find the sum of "
                        "the even-valued terms.\n")
        upper-limit 4000000
        fibonacci-sequence (fn fs [& [current-sequence]]
                             (let [current-sequence (or current-sequence [1 2])
                                   last-number (last current-sequence)
                                   second-last-number (last (pop current-sequence))
                                   next-in-sequence (+ last-number second-last-number)
                                   reached-upper-limit? (> next-in-sequence upper-limit)]
                               (if reached-upper-limit?
                                 current-sequence
                                 (fs (conj current-sequence next-in-sequence)))))]
  (common/blurb blurb-text)
  (newline)
  (->> (fibonacci-sequence) (filter even?) (reduce +) time clojure.pprint/pprint)))
