#!/usr/bin/env python3
import time


def blurb():
    print("""
    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers
    are all figurate (polygonal) numbers and are generated by the following
    formulae:
    Triangle        P3,n=n(n+1)/2       1, 3, 6, 10, 15, ...
    Square      P4,n=n2         1, 4, 9, 16, 25, ...
    Pentagonal      P5,n=n(3n−1)/2      1, 5, 12, 22, 35, ...
    Hexagonal       P6,n=n(2n−1)        1, 6, 15, 28, 45, ...
    Heptagonal      P7,n=n(5n−3)/2      1, 7, 18, 34, 55, ...
    Octagonal       P8,n=n(3n−2)        1, 8, 21, 40, 65, ...

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
    interesting properties.

    The set is cyclic, in that the last two digits of each number is the
    first two digits of the next number (including the last number with the
    first).

    Each polygonal type: triangle (P3,127=8128), square
    (P4,91=8281), and pentagonal (P5,44=2882), is represented by a
    different number in the set.

    This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit
    numbers for which each polygonal type: triangle, square,
    pentagonal, hexagonal, heptagonal, and octagonal, is
    represented by a different number in the set.
    """)


def compare_numbers(number_one, number_two):
    '''
    If the number types match then it's not a match / return False
    If the number endings don't match then it's not a match / return False
    '''
    if number_one[0] == number_two[0]:
        return False
    elif number_one[1][2:] != number_two[1][:2]:
        return False
    return True


def generate_relationships(numbers):
    '''
    Generate a dictionary of relationships
    '''
    results = {}
    control_list = numbers.copy()
    while len(control_list) > 0:
        compare = control_list.pop(0)
        results[compare] = []
        for number in numbers:
            if compare_numbers(compare, number):
                results[compare].append(number)
    return results


def is_valid(item, result):
    '''
    Item not present in result and item type not present in result
    '''
    current_results = [x[0] for x in result]
    if item in result:
        return False
    if item[0] in current_results:
        return False
    return True


def continuity_check(result, number):
    if len(result) > 1:
        if compare_numbers(result[len(result) - 1], number):
            return True
        return False
    return True


def recurse(number, relationships, result):
    relationship = relationships[number]
    for item in relationship:
        valid = is_valid(item, result)
        continuity = continuity_check(result, item)
        if valid and continuity:
            result.append(item)
            yield from recurse(item, relationships, result)
        elif not continuity:
            while not continuity:
                removed = result.pop()
                continuity = continuity_check(result, item)
            if is_valid(item, result):
                result.append(item)
                yield from recurse(item, relationships, result)
            else:
                yield result
        else:
            yield result


def find_relationship(numbers, relationships, breakpoint):
    '''
    Given a list of numbers find the longest relationship taking into account
    the breakpoint
    '''
    for number in numbers:
        for result in recurse(number, relationships, [number]):
            if len(result) >= breakpoint:
                if result[0] in relationships[result[len(result) - 1]]:
                    return result


def find_circulars(breakpoint, *args):
    '''
    Create a dictionary with the keys being tuple:
    {([a-f], number): [<suitable values>]}
    Then for each key of that dictionary, follow each suitable value up to
    breakpoint length building up a string of numbers
    Then check if the last two characters in that string are equivalent to the
    first two...
    '''
    number_lists = [x for x in args]
    all_numbers = []
    for number_list in number_lists:
        all_numbers += [x for x in number_list]
    relationship_dict = generate_relationships(all_numbers)
    relationship = find_relationship(all_numbers, relationship_dict, breakpoint)
    print("Found relationship: %s" % (relationship))
    return sum([int(x[1]) for x in relationship])


def problem_061():
    '''
    '''
    breakpoint = 6
    a = lambda x: int(x * ( (x + 1) / 2 ))
    b = lambda x: int(x ** 2)
    c = lambda x: int(x * ((3 * x - 1) / 2))
    d = lambda x: int(x * (2 * x - 1))
    e = lambda x: int(x * ((5 * x - 3) / 2))
    f = lambda x: int(x * (3 * x - 2))
    tri_nos = (('triangle', str(a(x))) for x in range(200) if 999 < a(x) < 10000)
    squ_nos = (('square', str(b(x))) for x in range(200) if 999 < b(x) < 10000)
    pen_nos = (('pentagon', str(c(x))) for x in range(200) if 999 < c(x) < 10000)
    hex_nos = (('hexagon', str(d(x))) for x in range(200) if 999 < d(x) < 10000)
    hep_nos = (('heptagon', str(e(x))) for x in range(200) if 999 < e(x) < 10000)
    oct_nos = (('octagon', str(f(x))) for x in range(200) if 999 < f(x) < 10000)
    return find_circulars(breakpoint,
                          tri_nos, squ_nos, pen_nos, hex_nos, hep_nos, oct_nos)


def main():
    blurb()
    start = time.time()
    RESULT = problem_061()
    end   = time.time() - start
    print("Result: %s"      % RESULT)
    print("Completed in %s" % end)


if __name__ == '__main__':
    main()
