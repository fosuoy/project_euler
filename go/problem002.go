package main


import (
    "fmt"
    "time"
)


func blurb() {
    fmt.Println(`
    Each new term in the Fibonacci sequence is generated by adding the previous
    two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    `)
}


func fibonacci_list(upper_bound, previous, next int) []int {
    if previous > upper_bound {
        return make([]int, 0)
    } else {
        return append([]int{previous},
                      fibonacci_list(upper_bound, next, next + previous)...)
    }
}

func sum_list_of_even_ints(int_list []int) (sum int) {
    for _, value := range int_list {
        if value % 2 == 0 {
            sum += value
        }
    }
    return
}


func problem002(upperBound int) (result int) {
    fibonacci_numbers := fibonacci_list(4000000, 0, 1)
    result = sum_list_of_even_ints(fibonacci_numbers)
    return result
}


func main() {
    blurb()
    var start time.Time = time.Now()
    var result int = problem002(100)
    var end time.Time = time.Now()
    var elapsed time.Duration = end.Sub(start)
    fmt.Printf("Result: %v\n", result)
    fmt.Printf("Completed in: %v\n", elapsed)
}
